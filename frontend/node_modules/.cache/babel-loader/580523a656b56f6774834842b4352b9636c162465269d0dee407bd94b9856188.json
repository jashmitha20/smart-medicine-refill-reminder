{"ast":null,"code":"/* Mock API mode for running frontend without backend */\nimport { MedicineStatus } from '../types/index.ts';\nconst delay = ms => new Promise(res => setTimeout(res, ms));\nconst demoUser = {\n  id: 1,\n  name: 'Demo User',\n  email: 'demo@example.com'\n};\nlet token = null;\nlet medicines = [{\n  id: 1,\n  medicineName: 'Atorvastatin 10mg',\n  dosagePerDay: 1,\n  totalQuantity: 30,\n  startDate: '2025-10-01',\n  refillDate: '2025-10-31',\n  currentQuantity: 10,\n  notificationsEnabled: true,\n  lowStockThreshold: 10,\n  status: MedicineStatus.LOW,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  daysLeft: 10,\n  remainingDoses: 10,\n  refillUrl: 'https://www.1mg.com/search/all?name=Atorvastatin'\n}, {\n  id: 2,\n  medicineName: 'Metformin 500mg',\n  dosagePerDay: 2,\n  totalQuantity: 60,\n  startDate: '2025-10-01',\n  refillDate: '2025-10-31',\n  currentQuantity: 5,\n  notificationsEnabled: true,\n  lowStockThreshold: 10,\n  status: MedicineStatus.REFILL_NEEDED,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  daysLeft: 2,\n  remainingDoses: 4,\n  refillUrl: 'https://www.1mg.com/search/all?name=Metformin'\n}];\nfunction computeSummary() {\n  const totalMedicines = medicines.length;\n  const refillNeeded = medicines.filter(m => m.status === MedicineStatus.REFILL_NEEDED).length;\n  const lowStock = medicines.filter(m => m.status === MedicineStatus.LOW).length;\n  const ok = medicines.filter(m => m.status === MedicineStatus.OK).length;\n  return {\n    totalMedicines,\n    refillNeeded,\n    lowStock,\n    ok,\n    recentMedicines: medicines.slice(0, 5)\n  };\n}\nexport const mockApi = {\n  async signin({\n    email,\n    password\n  }) {\n    await delay(600);\n    if (email === (process.env.REACT_APP_DEMO_EMAIL || 'demo@example.com') && password === (process.env.REACT_APP_DEMO_PASSWORD || 'demo1234')) {\n      token = 'mock-token-123';\n      return {\n        accessToken: token,\n        tokenType: 'Bearer',\n        user: demoUser\n      };\n    }\n    throw {\n      error: 'Invalid credentials'\n    };\n  },\n  async logout() {\n    await delay(200);\n    token = null;\n  },\n  async me() {\n    await delay(200);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return demoUser;\n  },\n  async getMedicines() {\n    await delay(300);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return medicines;\n  },\n  async getSummary() {\n    await delay(300);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return computeSummary();\n  },\n  async takeDose(id) {\n    await delay(200);\n    const m = medicines.find(x => x.id === id);\n    if (!m) throw {\n      error: 'Not found'\n    };\n    if (m.currentQuantity > 0) m.currentQuantity -= 1;\n    m.remainingDoses = Math.max(0, m.remainingDoses - 1);\n    m.daysLeft = Math.max(0, m.daysLeft - 1);\n    m.status = m.currentQuantity === 0 ? MedicineStatus.REFILL_NEEDED : m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\n    m.updatedAt = new Date().toISOString();\n    return m;\n  },\n  async refill(id, qty) {\n    await delay(200);\n    const m = medicines.find(x => x.id === id);\n    if (!m) throw {\n      error: 'Not found'\n    };\n    m.currentQuantity += qty;\n    m.totalQuantity += qty;\n    m.remainingDoses += qty;\n    m.daysLeft += Math.ceil(qty / m.dosagePerDay);\n    m.status = m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\n    m.updatedAt = new Date().toISOString();\n    return m;\n  }\n};","map":{"version":3,"names":["MedicineStatus","delay","ms","Promise","res","setTimeout","demoUser","id","name","email","token","medicines","medicineName","dosagePerDay","totalQuantity","startDate","refillDate","currentQuantity","notificationsEnabled","lowStockThreshold","status","LOW","createdAt","Date","toISOString","updatedAt","daysLeft","remainingDoses","refillUrl","REFILL_NEEDED","computeSummary","totalMedicines","length","refillNeeded","filter","m","lowStock","ok","OK","recentMedicines","slice","mockApi","signin","password","process","env","REACT_APP_DEMO_EMAIL","REACT_APP_DEMO_PASSWORD","accessToken","tokenType","user","error","logout","me","getMedicines","getSummary","takeDose","find","x","Math","max","refill","qty","ceil"],"sources":["C:/Users/Lenovo/smart-medicine-refill-system/frontend/src/services/mockApi.ts"],"sourcesContent":["/* Mock API mode for running frontend without backend */\r\nimport { AuthResponse, DashboardSummary, Medicine, MedicineStatus, User } from '../types/index.ts';\r\n\r\nconst delay = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\n\r\nconst demoUser: User = {\r\n  id: 1,\r\n  name: 'Demo User',\r\n  email: 'demo@example.com',\r\n};\r\n\r\nlet token: string | null = null;\r\nlet medicines: Medicine[] = [\r\n  {\r\n    id: 1,\r\n    medicineName: 'Atorvastatin 10mg',\r\n    dosagePerDay: 1,\r\n    totalQuantity: 30,\r\n    startDate: '2025-10-01',\r\n    refillDate: '2025-10-31',\r\n    currentQuantity: 10,\r\n    notificationsEnabled: true,\r\n    lowStockThreshold: 10,\r\n    status: MedicineStatus.LOW,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    daysLeft: 10,\r\n    remainingDoses: 10,\r\n    refillUrl: 'https://www.1mg.com/search/all?name=Atorvastatin',\r\n  },\r\n  {\r\n    id: 2,\r\n    medicineName: 'Metformin 500mg',\r\n    dosagePerDay: 2,\r\n    totalQuantity: 60,\r\n    startDate: '2025-10-01',\r\n    refillDate: '2025-10-31',\r\n    currentQuantity: 5,\r\n    notificationsEnabled: true,\r\n    lowStockThreshold: 10,\r\n    status: MedicineStatus.REFILL_NEEDED,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    daysLeft: 2,\r\n    remainingDoses: 4,\r\n    refillUrl: 'https://www.1mg.com/search/all?name=Metformin',\r\n  },\r\n];\r\n\r\nfunction computeSummary(): DashboardSummary {\r\n  const totalMedicines = medicines.length;\r\n  const refillNeeded = medicines.filter((m) => m.status === MedicineStatus.REFILL_NEEDED).length;\r\n  const lowStock = medicines.filter((m) => m.status === MedicineStatus.LOW).length;\r\n  const ok = medicines.filter((m) => m.status === MedicineStatus.OK).length;\r\n  return { totalMedicines, refillNeeded, lowStock, ok, recentMedicines: medicines.slice(0, 5) };\r\n}\r\n\r\nexport const mockApi = {\r\n  async signin({ email, password }: { email: string; password: string }): Promise<AuthResponse> {\r\n    await delay(600);\r\n    if (\r\n      email === (process.env.REACT_APP_DEMO_EMAIL || 'demo@example.com') &&\r\n      password === (process.env.REACT_APP_DEMO_PASSWORD || 'demo1234')\r\n    ) {\r\n      token = 'mock-token-123';\r\n      return { accessToken: token, tokenType: 'Bearer', user: demoUser };\r\n    }\r\n    throw { error: 'Invalid credentials' };\r\n  },\r\n  async logout(): Promise<void> {\r\n    await delay(200);\r\n    token = null;\r\n  },\r\n  async me(): Promise<User> {\r\n    await delay(200);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return demoUser;\r\n  },\r\n  async getMedicines(): Promise<Medicine[]> {\r\n    await delay(300);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return medicines;\r\n  },\r\n  async getSummary(): Promise<DashboardSummary> {\r\n    await delay(300);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return computeSummary();\r\n  },\r\n  async takeDose(id: number): Promise<Medicine> {\r\n    await delay(200);\r\n    const m = medicines.find((x) => x.id === id);\r\n    if (!m) throw { error: 'Not found' };\r\n    if (m.currentQuantity > 0) m.currentQuantity -= 1;\r\n    m.remainingDoses = Math.max(0, m.remainingDoses - 1);\r\n    m.daysLeft = Math.max(0, m.daysLeft - 1);\r\n    m.status = m.currentQuantity === 0 ? MedicineStatus.REFILL_NEEDED : m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\r\n    m.updatedAt = new Date().toISOString();\r\n    return m;\r\n  },\r\n  async refill(id: number, qty: number): Promise<Medicine> {\r\n    await delay(200);\r\n    const m = medicines.find((x) => x.id === id);\r\n    if (!m) throw { error: 'Not found' };\r\n    m.currentQuantity += qty;\r\n    m.totalQuantity += qty;\r\n    m.remainingDoses += qty;\r\n    m.daysLeft += Math.ceil(qty / m.dosagePerDay);\r\n    m.status = m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\r\n    m.updatedAt = new Date().toISOString();\r\n    return m;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}