{"ast":null,"code":"/* Mock API mode for running frontend without backend */\nimport { MedicineStatus } from '../types/index.ts';\nconst delay = ms => new Promise(res => setTimeout(res, ms));\nconst demoUser = {\n  id: 1,\n  name: 'Demo User',\n  email: 'demo@example.com'\n};\nlet token = null;\nlet currentUser = null;\n// In-memory per-user medicine storage (keyed by email)\nconst userMedicines = {};\n\n// Seed demo user's medicines\nuserMedicines[demoUser.email] = [{\n  id: 1,\n  medicineName: 'Atorvastatin 10mg',\n  dosagePerDay: 1,\n  totalQuantity: 30,\n  startDate: '2025-10-01',\n  refillDate: '2025-10-31',\n  currentQuantity: 10,\n  notificationsEnabled: true,\n  lowStockThreshold: 10,\n  status: MedicineStatus.LOW,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  daysLeft: 10,\n  remainingDoses: 10,\n  refillUrl: 'https://www.1mg.com/search/all?name=Atorvastatin'\n}, {\n  id: 2,\n  medicineName: 'Metformin 500mg',\n  dosagePerDay: 2,\n  totalQuantity: 60,\n  startDate: '2025-10-01',\n  refillDate: '2025-10-31',\n  currentQuantity: 5,\n  notificationsEnabled: true,\n  lowStockThreshold: 10,\n  status: MedicineStatus.REFILL_NEEDED,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  daysLeft: 2,\n  remainingDoses: 4,\n  refillUrl: 'https://www.1mg.com/search/all?name=Metformin'\n}];\nfunction getUserKey() {\n  var _currentUser;\n  return (((_currentUser = currentUser) === null || _currentUser === void 0 ? void 0 : _currentUser.email) || demoUser.email).toLowerCase();\n}\nfunction getList() {\n  const key = getUserKey();\n  if (!userMedicines[key]) userMedicines[key] = [];\n  return userMedicines[key];\n}\nfunction setList(list) {\n  const key = getUserKey();\n  userMedicines[key] = list;\n}\nfunction computeSummary() {\n  const list = getList();\n  const totalMedicines = list.length;\n  const refillNeeded = list.filter(m => m.status === MedicineStatus.REFILL_NEEDED).length;\n  const lowStock = list.filter(m => m.status === MedicineStatus.LOW).length;\n  const ok = list.filter(m => m.status === MedicineStatus.OK).length;\n  return {\n    totalMedicines,\n    refillNeeded,\n    lowStock,\n    ok,\n    recentMedicines: list.slice(0, 5)\n  };\n}\nexport const mockApi = {\n  async signin({\n    email,\n    password\n  }) {\n    await delay(600);\n    const allowAny = (process.env.REACT_APP_MOCK_LOGIN_ALLOW_ANY || '').toLowerCase() === 'true';\n    const demoEmail = process.env.REACT_APP_DEMO_EMAIL || 'demo@example.com';\n    const demoPass = process.env.REACT_APP_DEMO_PASSWORD || 'demo1234';\n    if (allowAny) {\n      if ((email || '').trim() && (password || '').trim()) {\n        token = 'mock-token-123';\n        currentUser = {\n          id: 2,\n          name: (email || '').split('@')[0] || 'User',\n          email\n        };\n        return {\n          accessToken: token,\n          tokenType: 'Bearer',\n          user: currentUser\n        };\n      }\n      throw {\n        error: 'Email and password required'\n      };\n    }\n    if (email === demoEmail && password === demoPass) {\n      token = 'mock-token-123';\n      currentUser = demoUser;\n      return {\n        accessToken: token,\n        tokenType: 'Bearer',\n        user: demoUser\n      };\n    }\n    throw {\n      error: 'Invalid credentials'\n    };\n  },\n  async signup({\n    name,\n    email,\n    password\n  }) {\n    await delay(600);\n    if (!(name !== null && name !== void 0 && name.trim()) || !(email !== null && email !== void 0 && email.trim()) || !(password !== null && password !== void 0 && password.trim())) {\n      throw {\n        error: 'All fields are required'\n      };\n    }\n    token = 'mock-token-123';\n    currentUser = {\n      id: Date.now(),\n      name,\n      email\n    };\n    return {\n      accessToken: token,\n      tokenType: 'Bearer',\n      user: currentUser\n    };\n  },\n  async logout() {\n    await delay(200);\n    token = null;\n    currentUser = null;\n  },\n  async me() {\n    await delay(200);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return currentUser || demoUser;\n  },\n  async getMedicines() {\n    await delay(300);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return getList();\n  },\n  async getSummary() {\n    await delay(300);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return computeSummary();\n  },\n  async takeDose(id) {\n    await delay(200);\n    const list = getList();\n    const m = list.find(x => x.id === id);\n    if (!m) throw {\n      error: 'Not found'\n    };\n    if (m.currentQuantity > 0) m.currentQuantity -= 1;\n    m.remainingDoses = Math.max(0, m.remainingDoses - 1);\n    m.daysLeft = Math.max(0, m.daysLeft - 1);\n    m.status = m.currentQuantity === 0 ? MedicineStatus.REFILL_NEEDED : m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\n    m.updatedAt = new Date().toISOString();\n    setList(list);\n    return m;\n  },\n  async refill(id, qty) {\n    await delay(200);\n    const list = getList();\n    const m = list.find(x => x.id === id);\n    if (!m) throw {\n      error: 'Not found'\n    };\n    m.currentQuantity += qty;\n    m.totalQuantity += qty;\n    m.remainingDoses += qty;\n    m.daysLeft += Math.ceil(qty / m.dosagePerDay);\n    m.status = m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\n    m.updatedAt = new Date().toISOString();\n    setList(list);\n    return m;\n  },\n  async createMedicine(input) {\n    var _input$currentQuantit, _input$notificationsE;\n    await delay(300);\n    const list = getList();\n    const id = list.length ? Math.max(...list.map(x => x.id)) + 1 : 1;\n    const now = new Date();\n    const startDate = input.startDate || now.toISOString().slice(0, 10);\n    const dosagePerDay = Number(input.dosagePerDay || 1);\n    const totalQuantity = Number(input.totalQuantity || 0);\n    const currentQuantity = Number((_input$currentQuantit = input.currentQuantity) !== null && _input$currentQuantit !== void 0 ? _input$currentQuantit : totalQuantity);\n    const daysLeft = dosagePerDay > 0 ? Math.ceil(currentQuantity / dosagePerDay) : 0;\n    const status = currentQuantity === 0 ? MedicineStatus.REFILL_NEEDED : currentQuantity <= Number(input.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\n    const med = {\n      id,\n      medicineName: String(input.medicineName || 'Unnamed'),\n      dosagePerDay,\n      totalQuantity,\n      startDate,\n      refillDate: startDate,\n      currentQuantity,\n      notificationsEnabled: Boolean((_input$notificationsE = input.notificationsEnabled) !== null && _input$notificationsE !== void 0 ? _input$notificationsE : true),\n      lowStockThreshold: Number(input.lowStockThreshold || 10),\n      status,\n      createdAt: now.toISOString(),\n      updatedAt: now.toISOString(),\n      daysLeft,\n      remainingDoses: currentQuantity,\n      refillUrl: (process.env.REACT_APP_PHARMACY_URL || 'https://www.1mg.com/search/all?name=') + encodeURIComponent(String(input.medicineName || ''))\n    };\n    list.push(med);\n    setList(list);\n    return med;\n  },\n  async updateMedicine(id, input) {\n    await delay(300);\n    const list = getList();\n    const idx = list.findIndex(x => x.id === id);\n    if (idx < 0) throw {\n      error: 'Not found'\n    };\n    const prev = list[idx];\n    const next = {\n      ...prev,\n      ...input,\n      updatedAt: new Date().toISOString()\n    };\n    // Recompute status and days\n    const dosage = Number(next.dosagePerDay || 1);\n    const qty = Number(next.currentQuantity || 0);\n    next.daysLeft = dosage > 0 ? Math.ceil(qty / dosage) : prev.daysLeft;\n    next.status = qty === 0 ? MedicineStatus.REFILL_NEEDED : qty <= Number(next.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\n    list[idx] = next;\n    setList(list);\n    return next;\n  },\n  async deleteMedicine(id) {\n    await delay(200);\n    const list = getList();\n    const next = list.filter(x => x.id !== id);\n    setList(next);\n    return {\n      message: 'Deleted'\n    };\n  }\n};","map":{"version":3,"names":["MedicineStatus","delay","ms","Promise","res","setTimeout","demoUser","id","name","email","token","currentUser","userMedicines","medicineName","dosagePerDay","totalQuantity","startDate","refillDate","currentQuantity","notificationsEnabled","lowStockThreshold","status","LOW","createdAt","Date","toISOString","updatedAt","daysLeft","remainingDoses","refillUrl","REFILL_NEEDED","getUserKey","_currentUser","toLowerCase","getList","key","setList","list","computeSummary","totalMedicines","length","refillNeeded","filter","m","lowStock","ok","OK","recentMedicines","slice","mockApi","signin","password","allowAny","process","env","REACT_APP_MOCK_LOGIN_ALLOW_ANY","demoEmail","REACT_APP_DEMO_EMAIL","demoPass","REACT_APP_DEMO_PASSWORD","trim","split","accessToken","tokenType","user","error","signup","now","logout","me","getMedicines","getSummary","takeDose","find","x","Math","max","refill","qty","ceil","createMedicine","input","_input$currentQuantit","_input$notificationsE","map","Number","med","String","Boolean","REACT_APP_PHARMACY_URL","encodeURIComponent","push","updateMedicine","idx","findIndex","prev","next","dosage","deleteMedicine","message"],"sources":["C:/Users/Lenovo/smart-medicine-refill-system/frontend/src/services/mockApi.ts"],"sourcesContent":["/* Mock API mode for running frontend without backend */\r\nimport { AuthResponse, DashboardSummary, Medicine, MedicineStatus, User } from '../types/index.ts';\r\n\r\nconst delay = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\n\r\nconst demoUser: User = {\r\n  id: 1,\r\n  name: 'Demo User',\r\n  email: 'demo@example.com',\r\n};\r\n\r\nlet token: string | null = null;\r\nlet currentUser: User | null = null;\r\n// In-memory per-user medicine storage (keyed by email)\r\nconst userMedicines: Record<string, Medicine[]> = {};\r\n\r\n// Seed demo user's medicines\r\nuserMedicines[demoUser.email] = [\r\n  {\r\n    id: 1,\r\n    medicineName: 'Atorvastatin 10mg',\r\n    dosagePerDay: 1,\r\n    totalQuantity: 30,\r\n    startDate: '2025-10-01',\r\n    refillDate: '2025-10-31',\r\n    currentQuantity: 10,\r\n    notificationsEnabled: true,\r\n    lowStockThreshold: 10,\r\n    status: MedicineStatus.LOW,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    daysLeft: 10,\r\n    remainingDoses: 10,\r\n    refillUrl: 'https://www.1mg.com/search/all?name=Atorvastatin',\r\n  },\r\n  {\r\n    id: 2,\r\n    medicineName: 'Metformin 500mg',\r\n    dosagePerDay: 2,\r\n    totalQuantity: 60,\r\n    startDate: '2025-10-01',\r\n    refillDate: '2025-10-31',\r\n    currentQuantity: 5,\r\n    notificationsEnabled: true,\r\n    lowStockThreshold: 10,\r\n    status: MedicineStatus.REFILL_NEEDED,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    daysLeft: 2,\r\n    remainingDoses: 4,\r\n    refillUrl: 'https://www.1mg.com/search/all?name=Metformin',\r\n  },\r\n];\r\n\r\nfunction getUserKey(): string {\r\n  return (currentUser?.email || demoUser.email).toLowerCase();\r\n}\r\n\r\nfunction getList(): Medicine[] {\r\n  const key = getUserKey();\r\n  if (!userMedicines[key]) userMedicines[key] = [];\r\n  return userMedicines[key];\r\n}\r\n\r\nfunction setList(list: Medicine[]) {\r\n  const key = getUserKey();\r\n  userMedicines[key] = list;\r\n}\r\n\r\nfunction computeSummary(): DashboardSummary {\r\n  const list = getList();\r\n  const totalMedicines = list.length;\r\n  const refillNeeded = list.filter((m) => m.status === MedicineStatus.REFILL_NEEDED).length;\r\n  const lowStock = list.filter((m) => m.status === MedicineStatus.LOW).length;\r\n  const ok = list.filter((m) => m.status === MedicineStatus.OK).length;\r\n  return { totalMedicines, refillNeeded, lowStock, ok, recentMedicines: list.slice(0, 5) };\r\n}\r\n\r\nexport const mockApi = {\r\n  async signin({ email, password }: { email: string; password: string }): Promise<AuthResponse> {\r\n    await delay(600);\r\n    const allowAny = (process.env.REACT_APP_MOCK_LOGIN_ALLOW_ANY || '').toLowerCase() === 'true';\r\n    const demoEmail = process.env.REACT_APP_DEMO_EMAIL || 'demo@example.com';\r\n    const demoPass = process.env.REACT_APP_DEMO_PASSWORD || 'demo1234';\r\n\r\n    if (allowAny) {\r\n      if ((email || '').trim() && (password || '').trim()) {\r\n        token = 'mock-token-123';\r\n        currentUser = { id: 2, name: (email || '').split('@')[0] || 'User', email };\r\n        return { accessToken: token, tokenType: 'Bearer', user: currentUser };\r\n      }\r\n      throw { error: 'Email and password required' };\r\n    }\r\n\r\n    if (email === demoEmail && password === demoPass) {\r\n      token = 'mock-token-123';\r\n      currentUser = demoUser;\r\n      return { accessToken: token, tokenType: 'Bearer', user: demoUser };\r\n    }\r\n    throw { error: 'Invalid credentials' };\r\n  },\r\n  async signup({ name, email, password }: { name: string; email: string; password: string }): Promise<AuthResponse> {\r\n    await delay(600);\r\n    if (!name?.trim() || !email?.trim() || !password?.trim()) {\r\n      throw { error: 'All fields are required' };\r\n    }\r\n    token = 'mock-token-123';\r\n    currentUser = { id: Date.now(), name, email };\r\n    return { accessToken: token, tokenType: 'Bearer', user: currentUser };\r\n  },\r\n  async logout(): Promise<void> {\r\n    await delay(200);\r\n    token = null;\r\n    currentUser = null;\r\n  },\r\n  async me(): Promise<User> {\r\n    await delay(200);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return currentUser || demoUser;\r\n  },\r\n  async getMedicines(): Promise<Medicine[]> {\r\n    await delay(300);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return getList();\r\n  },\r\n  async getSummary(): Promise<DashboardSummary> {\r\n    await delay(300);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return computeSummary();\r\n  },\r\n  async takeDose(id: number): Promise<Medicine> {\r\n    await delay(200);\r\n    const list = getList();\r\n    const m = list.find((x) => x.id === id);\r\n    if (!m) throw { error: 'Not found' };\r\n    if (m.currentQuantity > 0) m.currentQuantity -= 1;\r\n    m.remainingDoses = Math.max(0, m.remainingDoses - 1);\r\n    m.daysLeft = Math.max(0, m.daysLeft - 1);\r\n    m.status = m.currentQuantity === 0 ? MedicineStatus.REFILL_NEEDED : m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\r\n    m.updatedAt = new Date().toISOString();\r\n    setList(list);\r\n    return m;\r\n  },\r\n  async refill(id: number, qty: number): Promise<Medicine> {\r\n    await delay(200);\r\n    const list = getList();\r\n    const m = list.find((x) => x.id === id);\r\n    if (!m) throw { error: 'Not found' };\r\n    m.currentQuantity += qty;\r\n    m.totalQuantity += qty;\r\n    m.remainingDoses += qty;\r\n    m.daysLeft += Math.ceil(qty / m.dosagePerDay);\r\n    m.status = m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\r\n    m.updatedAt = new Date().toISOString();\r\n    setList(list);\r\n    return m;\r\n  },\r\n  async createMedicine(input: Partial<Medicine>): Promise<Medicine> {\r\n    await delay(300);\r\n    const list = getList();\r\n    const id = list.length ? Math.max(...list.map(x => x.id)) + 1 : 1;\r\n    const now = new Date();\r\n    const startDate = input.startDate || now.toISOString().slice(0,10);\r\n    const dosagePerDay = Number(input.dosagePerDay || 1);\r\n    const totalQuantity = Number(input.totalQuantity || 0);\r\n    const currentQuantity = Number(input.currentQuantity ?? totalQuantity);\r\n    const daysLeft = dosagePerDay > 0 ? Math.ceil(currentQuantity / dosagePerDay) : 0;\r\n    const status = currentQuantity === 0 ? MedicineStatus.REFILL_NEEDED : currentQuantity <= Number(input.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\r\n    const med: Medicine = {\r\n      id,\r\n      medicineName: String(input.medicineName || 'Unnamed'),\r\n      dosagePerDay,\r\n      totalQuantity,\r\n      startDate,\r\n      refillDate: startDate,\r\n      currentQuantity,\r\n      notificationsEnabled: Boolean(input.notificationsEnabled ?? true),\r\n      lowStockThreshold: Number(input.lowStockThreshold || 10),\r\n      status,\r\n      createdAt: now.toISOString(),\r\n      updatedAt: now.toISOString(),\r\n      daysLeft,\r\n      remainingDoses: currentQuantity,\r\n      refillUrl: (process.env.REACT_APP_PHARMACY_URL || 'https://www.1mg.com/search/all?name=') + encodeURIComponent(String(input.medicineName || '')),\r\n    };\r\n    list.push(med);\r\n    setList(list);\r\n    return med;\r\n  },\r\n  async updateMedicine(id: number, input: Partial<Medicine>): Promise<Medicine> {\r\n    await delay(300);\r\n    const list = getList();\r\n    const idx = list.findIndex(x => x.id === id);\r\n    if (idx < 0) throw { error: 'Not found' };\r\n    const prev = list[idx];\r\n    const next: Medicine = {\r\n      ...prev,\r\n      ...input,\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    // Recompute status and days\r\n    const dosage = Number(next.dosagePerDay || 1);\r\n    const qty = Number(next.currentQuantity || 0);\r\n    next.daysLeft = dosage > 0 ? Math.ceil(qty / dosage) : prev.daysLeft;\r\n    next.status = qty === 0 ? MedicineStatus.REFILL_NEEDED : qty <= Number(next.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\r\n    list[idx] = next;\r\n    setList(list);\r\n    return next;\r\n  },\r\n  async deleteMedicine(id: number): Promise<{ message: string }> {\r\n    await delay(200);\r\n    const list = getList();\r\n    const next = list.filter(x => x.id !== id);\r\n    setList(next);\r\n    return { message: 'Deleted' };\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}