{"ast":null,"code":"import apiService from './api';\nimport { MedicineStatus } from '../types';\nclass MedicineService {\n  async getAllMedicines() {\n    return await apiService.get('/medicines');\n  }\n  async getMedicineById(id) {\n    return await apiService.get(`/medicines/${id}`);\n  }\n  async createMedicine(medicine) {\n    return await apiService.post('/medicines', medicine);\n  }\n  async updateMedicine(id, medicine) {\n    return await apiService.put(`/medicines/${id}`, medicine);\n  }\n  async deleteMedicine(id) {\n    return await apiService.delete(`/medicines/${id}`);\n  }\n  async takeDose(id) {\n    return await apiService.post(`/medicines/${id}/take-dose`);\n  }\n  async refillMedicine(id, quantity) {\n    return await apiService.post(`/medicines/${id}/refill?quantity=${quantity}`);\n  }\n  async getMedicinesByStatus(status) {\n    return await apiService.get(`/medicines/status/${status}`);\n  }\n  async getDashboardSummary() {\n    return await apiService.get('/medicines/dashboard-summary');\n  }\n\n  // Utility methods for frontend logic\n  getStatusColor(status) {\n    switch (status) {\n      case MedicineStatus.OK:\n        return '#4CAF50';\n      case MedicineStatus.LOW:\n        return '#FF9800';\n      case MedicineStatus.REFILL_NEEDED:\n        return '#F44336';\n      default:\n        return '#757575';\n    }\n  }\n  getStatusText(status) {\n    switch (status) {\n      case MedicineStatus.OK:\n        return 'OK';\n      case MedicineStatus.LOW:\n        return 'Low Stock';\n      case MedicineStatus.REFILL_NEEDED:\n        return 'Refill Needed';\n      default:\n        return 'Unknown';\n    }\n  }\n  formatDaysLeft(daysLeft) {\n    if (daysLeft === 0) {\n      return 'Today';\n    } else if (daysLeft === 1) {\n      return '1 day';\n    } else if (daysLeft < 0) {\n      return 'Overdue';\n    } else {\n      return `${daysLeft} days`;\n    }\n  }\n  calculateProgress(currentQuantity, totalQuantity) {\n    if (totalQuantity === 0) return 0;\n    return currentQuantity / totalQuantity * 100;\n  }\n  sortMedicinesByPriority(medicines) {\n    return medicines.sort((a, b) => {\n      // First sort by status priority (REFILL_NEEDED > LOW > OK)\n      const statusPriority = {\n        [MedicineStatus.REFILL_NEEDED]: 3,\n        [MedicineStatus.LOW]: 2,\n        [MedicineStatus.OK]: 1\n      };\n      const statusDiff = statusPriority[b.status] - statusPriority[a.status];\n      if (statusDiff !== 0) return statusDiff;\n\n      // Then sort by days left (ascending)\n      return a.daysLeft - b.daysLeft;\n    });\n  }\n}\nexport default new MedicineService();","map":{"version":3,"names":["apiService","MedicineStatus","MedicineService","getAllMedicines","get","getMedicineById","id","createMedicine","medicine","post","updateMedicine","put","deleteMedicine","delete","takeDose","refillMedicine","quantity","getMedicinesByStatus","status","getDashboardSummary","getStatusColor","OK","LOW","REFILL_NEEDED","getStatusText","formatDaysLeft","daysLeft","calculateProgress","currentQuantity","totalQuantity","sortMedicinesByPriority","medicines","sort","a","b","statusPriority","statusDiff"],"sources":["C:/Users/Lenovo/smart-medicine-refill-system/frontend/src/services/medicineService.ts"],"sourcesContent":["import apiService from './api';\r\nimport { Medicine, MedicineRequest, MedicineStatus, DashboardSummary } from '../types';\r\n\r\nclass MedicineService {\r\n  async getAllMedicines(): Promise<Medicine[]> {\r\n    return await apiService.get<Medicine[]>('/medicines');\r\n  }\r\n\r\n  async getMedicineById(id: number): Promise<Medicine> {\r\n    return await apiService.get<Medicine>(`/medicines/${id}`);\r\n  }\r\n\r\n  async createMedicine(medicine: MedicineRequest): Promise<Medicine> {\r\n    return await apiService.post<Medicine>('/medicines', medicine);\r\n  }\r\n\r\n  async updateMedicine(id: number, medicine: MedicineRequest): Promise<Medicine> {\r\n    return await apiService.put<Medicine>(`/medicines/${id}`, medicine);\r\n  }\r\n\r\n  async deleteMedicine(id: number): Promise<{ message: string }> {\r\n    return await apiService.delete<{ message: string }>(`/medicines/${id}`);\r\n  }\r\n\r\n  async takeDose(id: number): Promise<Medicine> {\r\n    return await apiService.post<Medicine>(`/medicines/${id}/take-dose`);\r\n  }\r\n\r\n  async refillMedicine(id: number, quantity: number): Promise<Medicine> {\r\n    return await apiService.post<Medicine>(`/medicines/${id}/refill?quantity=${quantity}`);\r\n  }\r\n\r\n  async getMedicinesByStatus(status: MedicineStatus): Promise<Medicine[]> {\r\n    return await apiService.get<Medicine[]>(`/medicines/status/${status}`);\r\n  }\r\n\r\n  async getDashboardSummary(): Promise<DashboardSummary> {\r\n    return await apiService.get<DashboardSummary>('/medicines/dashboard-summary');\r\n  }\r\n\r\n  // Utility methods for frontend logic\r\n  getStatusColor(status: MedicineStatus): string {\r\n    switch (status) {\r\n      case MedicineStatus.OK:\r\n        return '#4CAF50';\r\n      case MedicineStatus.LOW:\r\n        return '#FF9800';\r\n      case MedicineStatus.REFILL_NEEDED:\r\n        return '#F44336';\r\n      default:\r\n        return '#757575';\r\n    }\r\n  }\r\n\r\n  getStatusText(status: MedicineStatus): string {\r\n    switch (status) {\r\n      case MedicineStatus.OK:\r\n        return 'OK';\r\n      case MedicineStatus.LOW:\r\n        return 'Low Stock';\r\n      case MedicineStatus.REFILL_NEEDED:\r\n        return 'Refill Needed';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  }\r\n\r\n  formatDaysLeft(daysLeft: number): string {\r\n    if (daysLeft === 0) {\r\n      return 'Today';\r\n    } else if (daysLeft === 1) {\r\n      return '1 day';\r\n    } else if (daysLeft < 0) {\r\n      return 'Overdue';\r\n    } else {\r\n      return `${daysLeft} days`;\r\n    }\r\n  }\r\n\r\n  calculateProgress(currentQuantity: number, totalQuantity: number): number {\r\n    if (totalQuantity === 0) return 0;\r\n    return (currentQuantity / totalQuantity) * 100;\r\n  }\r\n\r\n  sortMedicinesByPriority(medicines: Medicine[]): Medicine[] {\r\n    return medicines.sort((a, b) => {\r\n      // First sort by status priority (REFILL_NEEDED > LOW > OK)\r\n      const statusPriority = {\r\n        [MedicineStatus.REFILL_NEEDED]: 3,\r\n        [MedicineStatus.LOW]: 2,\r\n        [MedicineStatus.OK]: 1,\r\n      };\r\n\r\n      const statusDiff = statusPriority[b.status] - statusPriority[a.status];\r\n      if (statusDiff !== 0) return statusDiff;\r\n\r\n      // Then sort by days left (ascending)\r\n      return a.daysLeft - b.daysLeft;\r\n    });\r\n  }\r\n}\r\n\r\nexport default new MedicineService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}