{"ast":null,"code":"import apiService from './api';\nclass AuthService {\n  async login(credentials) {\n    const response = await apiService.post('/auth/signin', credentials);\n\n    // Store auth token and user data\n    apiService.setAuthToken(response.accessToken);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    return response;\n  }\n  async signup(userData) {\n    const response = await apiService.post('/auth/signup', userData);\n\n    // Store auth token and user data\n    apiService.setAuthToken(response.accessToken);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    return response;\n  }\n  async logout() {\n    try {\n      await apiService.post('/auth/logout');\n    } catch (error) {\n      // Even if logout request fails, clear local storage\n      console.warn('Logout request failed, but clearing local storage');\n    } finally {\n      apiService.removeAuthToken();\n    }\n  }\n  async getCurrentUser() {\n    return await apiService.get('/auth/me');\n  }\n  getCurrentUserFromStorage() {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      try {\n        return JSON.parse(userStr);\n      } catch (error) {\n        console.error('Error parsing user from localStorage:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    return null;\n  }\n  isAuthenticated() {\n    return apiService.isAuthenticated() && !!this.getCurrentUserFromStorage();\n  }\n  clearAuth() {\n    apiService.removeAuthToken();\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["apiService","AuthService","login","credentials","response","post","setAuthToken","accessToken","localStorage","setItem","JSON","stringify","user","signup","userData","logout","error","console","warn","removeAuthToken","getCurrentUser","get","getCurrentUserFromStorage","userStr","getItem","parse","removeItem","isAuthenticated","clearAuth"],"sources":["C:/Users/Lenovo/smart-medicine-refill-system/frontend/src/services/authService.ts"],"sourcesContent":["import apiService from './api';\r\nimport { AuthResponse, LoginRequest, SignUpRequest, User } from '../types';\r\n\r\nclass AuthService {\r\n  async login(credentials: LoginRequest): Promise<AuthResponse> {\r\n    const response = await apiService.post<AuthResponse>('/auth/signin', credentials);\r\n    \r\n    // Store auth token and user data\r\n    apiService.setAuthToken(response.accessToken);\r\n    localStorage.setItem('user', JSON.stringify(response.user));\r\n    \r\n    return response;\r\n  }\r\n\r\n  async signup(userData: SignUpRequest): Promise<AuthResponse> {\r\n    const response = await apiService.post<AuthResponse>('/auth/signup', userData);\r\n    \r\n    // Store auth token and user data\r\n    apiService.setAuthToken(response.accessToken);\r\n    localStorage.setItem('user', JSON.stringify(response.user));\r\n    \r\n    return response;\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    try {\r\n      await apiService.post('/auth/logout');\r\n    } catch (error) {\r\n      // Even if logout request fails, clear local storage\r\n      console.warn('Logout request failed, but clearing local storage');\r\n    } finally {\r\n      apiService.removeAuthToken();\r\n    }\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    return await apiService.get<User>('/auth/me');\r\n  }\r\n\r\n  getCurrentUserFromStorage(): User | null {\r\n    const userStr = localStorage.getItem('user');\r\n    if (userStr) {\r\n      try {\r\n        return JSON.parse(userStr);\r\n      } catch (error) {\r\n        console.error('Error parsing user from localStorage:', error);\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return apiService.isAuthenticated() && !!this.getCurrentUserFromStorage();\r\n  }\r\n\r\n  clearAuth(): void {\r\n    apiService.removeAuthToken();\r\n  }\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"AAAA,OAAOA,UAAU,MAAM,OAAO;AAG9B,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,WAAyB,EAAyB;IAC5D,MAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACK,IAAI,CAAe,cAAc,EAAEF,WAAW,CAAC;;IAEjF;IACAH,UAAU,CAACM,YAAY,CAACF,QAAQ,CAACG,WAAW,CAAC;IAC7CC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAE3D,OAAOR,QAAQ;EACjB;EAEA,MAAMS,MAAMA,CAACC,QAAuB,EAAyB;IAC3D,MAAMV,QAAQ,GAAG,MAAMJ,UAAU,CAACK,IAAI,CAAe,cAAc,EAAES,QAAQ,CAAC;;IAE9E;IACAd,UAAU,CAACM,YAAY,CAACF,QAAQ,CAACG,WAAW,CAAC;IAC7CC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAE3D,OAAOR,QAAQ;EACjB;EAEA,MAAMW,MAAMA,CAAA,EAAkB;IAC5B,IAAI;MACF,MAAMf,UAAU,CAACK,IAAI,CAAC,cAAc,CAAC;IACvC,CAAC,CAAC,OAAOW,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,IAAI,CAAC,mDAAmD,CAAC;IACnE,CAAC,SAAS;MACRlB,UAAU,CAACmB,eAAe,CAAC,CAAC;IAC9B;EACF;EAEA,MAAMC,cAAcA,CAAA,EAAkB;IACpC,OAAO,MAAMpB,UAAU,CAACqB,GAAG,CAAO,UAAU,CAAC;EAC/C;EAEAC,yBAAyBA,CAAA,EAAgB;IACvC,MAAMC,OAAO,GAAGf,YAAY,CAACgB,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAID,OAAO,EAAE;MACX,IAAI;QACF,OAAOb,IAAI,CAACe,KAAK,CAACF,OAAO,CAAC;MAC5B,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;QAC7DR,YAAY,CAACkB,UAAU,CAAC,MAAM,CAAC;MACjC;IACF;IACA,OAAO,IAAI;EACb;EAEAC,eAAeA,CAAA,EAAY;IACzB,OAAO3B,UAAU,CAAC2B,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAACL,yBAAyB,CAAC,CAAC;EAC3E;EAEAM,SAASA,CAAA,EAAS;IAChB5B,UAAU,CAACmB,eAAe,CAAC,CAAC;EAC9B;AACF;AAEA,eAAe,IAAIlB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}