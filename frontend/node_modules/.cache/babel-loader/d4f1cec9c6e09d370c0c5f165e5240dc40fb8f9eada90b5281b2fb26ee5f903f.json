{"ast":null,"code":"import axios from 'axios';\nimport { mockApi } from './mockApi.ts';\nclass ApiService {\n  constructor() {\n    var _process$env$REACT_AP;\n    this.api = null;\n    // Default to mock mode unless explicitly disabled\n    this.useMock = ((_process$env$REACT_AP = process.env.REACT_APP_USE_MOCK_API) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : 'true').toLowerCase() === 'true';\n    if (!this.useMock) {\n      this.api = axios.create({\n        baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      this.setupInterceptors();\n    }\n  }\n  setupInterceptors() {\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor to handle auth errors\n    this.api.interceptors.response.use(response => {\n      return response;\n    }, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Token expired or invalid\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Generic request methods\n  async get(url) {\n    if (this.useMock) {\n      if (url === '/auth/me') return await mockApi.me();\n      if (url === '/medicines') return await mockApi.getMedicines();\n      if (url === '/medicines/dashboard-summary') return await mockApi.getSummary();\n      throw {\n        error: `Mock GET not implemented for ${url}`\n      };\n    }\n    try {\n      const response = await this.api.get(url);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async post(url, data) {\n    if (this.useMock) {\n      if (url === '/auth/signin') return await mockApi.signin(data);\n      if (url === '/auth/logout') return await mockApi.logout();\n      if (url.startsWith('/medicines/') && url.endsWith('/take-dose')) {\n        const id = Number(url.split('/')[2]);\n        return await mockApi.takeDose(id);\n      }\n      if (url.startsWith('/medicines/') && url.includes('/refill')) {\n        var _data$quantity;\n        const id = Number(url.split('/')[2]);\n        const qtyParam = new URLSearchParams(url.split('?')[1] || '').get('quantity');\n        const qty = Number(qtyParam || 0) || ((_data$quantity = data === null || data === void 0 ? void 0 : data.quantity) !== null && _data$quantity !== void 0 ? _data$quantity : 10);\n        return await mockApi.refill(id, qty);\n      }\n      throw {\n        error: `Mock POST not implemented for ${url}`\n      };\n    }\n    try {\n      const response = await this.api.post(url, data);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async put(url, data) {\n    if (this.useMock) {\n      throw {\n        error: `Mock PUT not implemented for ${url}`\n      };\n    }\n    try {\n      const response = await this.api.put(url, data);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async delete(url) {\n    if (this.useMock) {\n      throw {\n        error: `Mock DELETE not implemented for ${url}`\n      };\n    }\n    try {\n      const response = await this.api.delete(url);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  handleError(error) {\n    if (error.response) {\n      var _error$response$data, _error$response$data2;\n      // Server responded with error status\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'An error occurred';\n      return {\n        error: message,\n        message: error.response.statusText\n      };\n    } else if (error.request) {\n      // Request made but no response received\n      return {\n        error: 'Network error',\n        message: 'Unable to connect to server'\n      };\n    } else {\n      // Something else happened\n      return {\n        error: 'Request failed',\n        message: error.message || 'Unknown error occurred'\n      };\n    }\n  }\n\n  // Auth methods\n  setAuthToken(token) {\n    localStorage.setItem('authToken', token);\n  }\n  removeAuthToken() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  }\n  getAuthToken() {\n    return localStorage.getItem('authToken');\n  }\n  isAuthenticated() {\n    return !!this.getAuthToken();\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","mockApi","ApiService","constructor","_process$env$REACT_AP","api","useMock","process","env","REACT_APP_USE_MOCK_API","toLowerCase","create","baseURL","REACT_APP_API_URL","timeout","headers","setupInterceptors","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","get","url","me","getMedicines","getSummary","data","handleError","post","signin","logout","startsWith","endsWith","id","Number","split","takeDose","includes","_data$quantity","qtyParam","URLSearchParams","qty","quantity","refill","put","delete","_error$response$data","_error$response$data2","message","statusText","setAuthToken","setItem","removeAuthToken","getAuthToken","isAuthenticated"],"sources":["C:/Users/Lenovo/smart-medicine-refill-system/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { AuthResponse, ApiError } from '../types/index.ts';\r\nimport { mockApi } from './mockApi.ts';\r\n\r\nclass ApiService {\r\n  private api: AxiosInstance | null = null;\r\n  // Default to mock mode unless explicitly disabled\r\n  private useMock = ((process.env.REACT_APP_USE_MOCK_API ?? 'true').toLowerCase() === 'true');\r\n\r\n  constructor() {\r\n    if (!this.useMock) {\r\n      this.api = axios.create({\r\n        baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\r\n        timeout: 10000,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      this.setupInterceptors();\r\n    }\r\n  }\r\n\r\n  private setupInterceptors() {\r\n    // Request interceptor to add auth token\r\n    this.api.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Response interceptor to handle auth errors\r\n    this.api.interceptors.response.use(\r\n      (response: AxiosResponse) => {\r\n        return response;\r\n      },\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          // Token expired or invalid\r\n          localStorage.removeItem('authToken');\r\n          localStorage.removeItem('user');\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Generic request methods\r\n  async get<T>(url: string): Promise<T> {\r\n    if (this.useMock) {\r\n      if (url === '/auth/me') return (await mockApi.me()) as unknown as T;\r\n      if (url === '/medicines') return (await mockApi.getMedicines()) as unknown as T;\r\n      if (url === '/medicines/dashboard-summary') return (await mockApi.getSummary()) as unknown as T;\r\n      throw { error: `Mock GET not implemented for ${url}` };\r\n    }\r\n    try {\r\n      const response = await (this.api as AxiosInstance).get<T>(url);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  async post<T>(url: string, data?: any): Promise<T> {\r\n    if (this.useMock) {\r\n      if (url === '/auth/signin') return (await mockApi.signin(data)) as unknown as T;\r\n      if (url === '/auth/logout') return (await mockApi.logout()) as unknown as T;\r\n      if (url.startsWith('/medicines/') && url.endsWith('/take-dose')) {\r\n        const id = Number(url.split('/')[2]);\r\n        return (await mockApi.takeDose(id)) as unknown as T;\r\n      }\r\n      if (url.startsWith('/medicines/') && url.includes('/refill')) {\r\n        const id = Number(url.split('/')[2]);\r\n        const qtyParam = new URLSearchParams(url.split('?')[1] || '').get('quantity');\r\n        const qty = Number(qtyParam || 0) || (data?.quantity ?? 10);\r\n        return (await mockApi.refill(id, qty)) as unknown as T;\r\n      }\r\n      throw { error: `Mock POST not implemented for ${url}` };\r\n    }\r\n    try {\r\n      const response = await (this.api as AxiosInstance).post<T>(url, data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  async put<T>(url: string, data?: any): Promise<T> {\r\n    if (this.useMock) {\r\n      throw { error: `Mock PUT not implemented for ${url}` };\r\n    }\r\n    try {\r\n      const response = await (this.api as AxiosInstance).put<T>(url, data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  async delete<T>(url: string): Promise<T> {\r\n    if (this.useMock) {\r\n      throw { error: `Mock DELETE not implemented for ${url}` };\r\n    }\r\n    try {\r\n      const response = await (this.api as AxiosInstance).delete<T>(url);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  private handleError(error: any): ApiError {\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      const message = error.response.data?.error || error.response.data?.message || 'An error occurred';\r\n      return {\r\n        error: message,\r\n        message: error.response.statusText,\r\n      };\r\n    } else if (error.request) {\r\n      // Request made but no response received\r\n      return {\r\n        error: 'Network error',\r\n        message: 'Unable to connect to server',\r\n      };\r\n    } else {\r\n      // Something else happened\r\n      return {\r\n        error: 'Request failed',\r\n        message: error.message || 'Unknown error occurred',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Auth methods\r\n  setAuthToken(token: string) {\r\n    localStorage.setItem('authToken', token);\r\n  }\r\n\r\n  removeAuthToken() {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  getAuthToken(): string | null {\r\n    return localStorage.getItem('authToken');\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getAuthToken();\r\n  }\r\n}\r\n\r\nexport default new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}