{"ast":null,"code":"/* Mock API mode for running frontend without backend */\nimport { MedicineStatus } from '../types/index.ts';\nconst delay = ms => new Promise(res => setTimeout(res, ms));\nconst demoUser = {\n  id: 1,\n  name: 'Demo User',\n  email: 'demo@example.com'\n};\nlet token = null;\nlet currentUser = null;\nlet medicines = [{\n  id: 1,\n  medicineName: 'Atorvastatin 10mg',\n  dosagePerDay: 1,\n  totalQuantity: 30,\n  startDate: '2025-10-01',\n  refillDate: '2025-10-31',\n  currentQuantity: 10,\n  notificationsEnabled: true,\n  lowStockThreshold: 10,\n  status: MedicineStatus.LOW,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  daysLeft: 10,\n  remainingDoses: 10,\n  refillUrl: 'https://www.1mg.com/search/all?name=Atorvastatin'\n}, {\n  id: 2,\n  medicineName: 'Metformin 500mg',\n  dosagePerDay: 2,\n  totalQuantity: 60,\n  startDate: '2025-10-01',\n  refillDate: '2025-10-31',\n  currentQuantity: 5,\n  notificationsEnabled: true,\n  lowStockThreshold: 10,\n  status: MedicineStatus.REFILL_NEEDED,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  daysLeft: 2,\n  remainingDoses: 4,\n  refillUrl: 'https://www.1mg.com/search/all?name=Metformin'\n}];\nfunction computeSummary() {\n  const totalMedicines = medicines.length;\n  const refillNeeded = medicines.filter(m => m.status === MedicineStatus.REFILL_NEEDED).length;\n  const lowStock = medicines.filter(m => m.status === MedicineStatus.LOW).length;\n  const ok = medicines.filter(m => m.status === MedicineStatus.OK).length;\n  return {\n    totalMedicines,\n    refillNeeded,\n    lowStock,\n    ok,\n    recentMedicines: medicines.slice(0, 5)\n  };\n}\nexport const mockApi = {\n  async signin({\n    email,\n    password\n  }) {\n    await delay(600);\n    const allowAny = (process.env.REACT_APP_MOCK_LOGIN_ALLOW_ANY || '').toLowerCase() === 'true';\n    const demoEmail = process.env.REACT_APP_DEMO_EMAIL || 'demo@example.com';\n    const demoPass = process.env.REACT_APP_DEMO_PASSWORD || 'demo1234';\n    if (allowAny) {\n      if ((email || '').trim() && (password || '').trim()) {\n        token = 'mock-token-123';\n        currentUser = {\n          id: 2,\n          name: (email || '').split('@')[0] || 'User',\n          email\n        };\n        return {\n          accessToken: token,\n          tokenType: 'Bearer',\n          user: currentUser\n        };\n      }\n      throw {\n        error: 'Email and password required'\n      };\n    }\n    if (email === demoEmail && password === demoPass) {\n      token = 'mock-token-123';\n      currentUser = demoUser;\n      return {\n        accessToken: token,\n        tokenType: 'Bearer',\n        user: demoUser\n      };\n    }\n    throw {\n      error: 'Invalid credentials'\n    };\n  },\n  async signup({\n    name,\n    email,\n    password\n  }) {\n    await delay(600);\n    if (!(name !== null && name !== void 0 && name.trim()) || !(email !== null && email !== void 0 && email.trim()) || !(password !== null && password !== void 0 && password.trim())) {\n      throw {\n        error: 'All fields are required'\n      };\n    }\n    token = 'mock-token-123';\n    currentUser = {\n      id: Date.now(),\n      name,\n      email\n    };\n    return {\n      accessToken: token,\n      tokenType: 'Bearer',\n      user: currentUser\n    };\n  },\n  async logout() {\n    await delay(200);\n    token = null;\n    currentUser = null;\n  },\n  async me() {\n    await delay(200);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return currentUser || demoUser;\n  },\n  async getMedicines() {\n    await delay(300);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return medicines;\n  },\n  async getSummary() {\n    await delay(300);\n    if (!token) throw {\n      error: 'Unauthorized'\n    };\n    return computeSummary();\n  },\n  async takeDose(id) {\n    await delay(200);\n    const m = medicines.find(x => x.id === id);\n    if (!m) throw {\n      error: 'Not found'\n    };\n    if (m.currentQuantity > 0) m.currentQuantity -= 1;\n    m.remainingDoses = Math.max(0, m.remainingDoses - 1);\n    m.daysLeft = Math.max(0, m.daysLeft - 1);\n    m.status = m.currentQuantity === 0 ? MedicineStatus.REFILL_NEEDED : m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\n    m.updatedAt = new Date().toISOString();\n    return m;\n  },\n  async refill(id, qty) {\n    await delay(200);\n    const m = medicines.find(x => x.id === id);\n    if (!m) throw {\n      error: 'Not found'\n    };\n    m.currentQuantity += qty;\n    m.totalQuantity += qty;\n    m.remainingDoses += qty;\n    m.daysLeft += Math.ceil(qty / m.dosagePerDay);\n    m.status = m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\n    m.updatedAt = new Date().toISOString();\n    return m;\n  }\n};","map":{"version":3,"names":["MedicineStatus","delay","ms","Promise","res","setTimeout","demoUser","id","name","email","token","currentUser","medicines","medicineName","dosagePerDay","totalQuantity","startDate","refillDate","currentQuantity","notificationsEnabled","lowStockThreshold","status","LOW","createdAt","Date","toISOString","updatedAt","daysLeft","remainingDoses","refillUrl","REFILL_NEEDED","computeSummary","totalMedicines","length","refillNeeded","filter","m","lowStock","ok","OK","recentMedicines","slice","mockApi","signin","password","allowAny","process","env","REACT_APP_MOCK_LOGIN_ALLOW_ANY","toLowerCase","demoEmail","REACT_APP_DEMO_EMAIL","demoPass","REACT_APP_DEMO_PASSWORD","trim","split","accessToken","tokenType","user","error","signup","now","logout","me","getMedicines","getSummary","takeDose","find","x","Math","max","refill","qty","ceil"],"sources":["C:/Users/Lenovo/smart-medicine-refill-system/frontend/src/services/mockApi.ts"],"sourcesContent":["/* Mock API mode for running frontend without backend */\r\nimport { AuthResponse, DashboardSummary, Medicine, MedicineStatus, User } from '../types/index.ts';\r\n\r\nconst delay = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\n\r\nconst demoUser: User = {\r\n  id: 1,\r\n  name: 'Demo User',\r\n  email: 'demo@example.com',\r\n};\r\n\r\nlet token: string | null = null;\r\nlet currentUser: User | null = null;\r\nlet medicines: Medicine[] = [\r\n  {\r\n    id: 1,\r\n    medicineName: 'Atorvastatin 10mg',\r\n    dosagePerDay: 1,\r\n    totalQuantity: 30,\r\n    startDate: '2025-10-01',\r\n    refillDate: '2025-10-31',\r\n    currentQuantity: 10,\r\n    notificationsEnabled: true,\r\n    lowStockThreshold: 10,\r\n    status: MedicineStatus.LOW,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    daysLeft: 10,\r\n    remainingDoses: 10,\r\n    refillUrl: 'https://www.1mg.com/search/all?name=Atorvastatin',\r\n  },\r\n  {\r\n    id: 2,\r\n    medicineName: 'Metformin 500mg',\r\n    dosagePerDay: 2,\r\n    totalQuantity: 60,\r\n    startDate: '2025-10-01',\r\n    refillDate: '2025-10-31',\r\n    currentQuantity: 5,\r\n    notificationsEnabled: true,\r\n    lowStockThreshold: 10,\r\n    status: MedicineStatus.REFILL_NEEDED,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    daysLeft: 2,\r\n    remainingDoses: 4,\r\n    refillUrl: 'https://www.1mg.com/search/all?name=Metformin',\r\n  },\r\n];\r\n\r\nfunction computeSummary(): DashboardSummary {\r\n  const totalMedicines = medicines.length;\r\n  const refillNeeded = medicines.filter((m) => m.status === MedicineStatus.REFILL_NEEDED).length;\r\n  const lowStock = medicines.filter((m) => m.status === MedicineStatus.LOW).length;\r\n  const ok = medicines.filter((m) => m.status === MedicineStatus.OK).length;\r\n  return { totalMedicines, refillNeeded, lowStock, ok, recentMedicines: medicines.slice(0, 5) };\r\n}\r\n\r\nexport const mockApi = {\r\n  async signin({ email, password }: { email: string; password: string }): Promise<AuthResponse> {\r\n    await delay(600);\r\n    const allowAny = (process.env.REACT_APP_MOCK_LOGIN_ALLOW_ANY || '').toLowerCase() === 'true';\r\n    const demoEmail = process.env.REACT_APP_DEMO_EMAIL || 'demo@example.com';\r\n    const demoPass = process.env.REACT_APP_DEMO_PASSWORD || 'demo1234';\r\n\r\n    if (allowAny) {\r\n      if ((email || '').trim() && (password || '').trim()) {\r\n        token = 'mock-token-123';\r\n        currentUser = { id: 2, name: (email || '').split('@')[0] || 'User', email };\r\n        return { accessToken: token, tokenType: 'Bearer', user: currentUser };\r\n      }\r\n      throw { error: 'Email and password required' };\r\n    }\r\n\r\n    if (email === demoEmail && password === demoPass) {\r\n      token = 'mock-token-123';\r\n      currentUser = demoUser;\r\n      return { accessToken: token, tokenType: 'Bearer', user: demoUser };\r\n    }\r\n    throw { error: 'Invalid credentials' };\r\n  },\r\n  async signup({ name, email, password }: { name: string; email: string; password: string }): Promise<AuthResponse> {\r\n    await delay(600);\r\n    if (!name?.trim() || !email?.trim() || !password?.trim()) {\r\n      throw { error: 'All fields are required' };\r\n    }\r\n    token = 'mock-token-123';\r\n    currentUser = { id: Date.now(), name, email };\r\n    return { accessToken: token, tokenType: 'Bearer', user: currentUser };\r\n  },\r\n  async logout(): Promise<void> {\r\n    await delay(200);\r\n    token = null;\r\n    currentUser = null;\r\n  },\r\n  async me(): Promise<User> {\r\n    await delay(200);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return currentUser || demoUser;\r\n  },\r\n  async getMedicines(): Promise<Medicine[]> {\r\n    await delay(300);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return medicines;\r\n  },\r\n  async getSummary(): Promise<DashboardSummary> {\r\n    await delay(300);\r\n    if (!token) throw { error: 'Unauthorized' };\r\n    return computeSummary();\r\n  },\r\n  async takeDose(id: number): Promise<Medicine> {\r\n    await delay(200);\r\n    const m = medicines.find((x) => x.id === id);\r\n    if (!m) throw { error: 'Not found' };\r\n    if (m.currentQuantity > 0) m.currentQuantity -= 1;\r\n    m.remainingDoses = Math.max(0, m.remainingDoses - 1);\r\n    m.daysLeft = Math.max(0, m.daysLeft - 1);\r\n    m.status = m.currentQuantity === 0 ? MedicineStatus.REFILL_NEEDED : m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\r\n    m.updatedAt = new Date().toISOString();\r\n    return m;\r\n  },\r\n  async refill(id: number, qty: number): Promise<Medicine> {\r\n    await delay(200);\r\n    const m = medicines.find((x) => x.id === id);\r\n    if (!m) throw { error: 'Not found' };\r\n    m.currentQuantity += qty;\r\n    m.totalQuantity += qty;\r\n    m.remainingDoses += qty;\r\n    m.daysLeft += Math.ceil(qty / m.dosagePerDay);\r\n    m.status = m.currentQuantity <= (m.lowStockThreshold || 10) ? MedicineStatus.LOW : MedicineStatus.OK;\r\n    m.updatedAt = new Date().toISOString();\r\n    return m;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}