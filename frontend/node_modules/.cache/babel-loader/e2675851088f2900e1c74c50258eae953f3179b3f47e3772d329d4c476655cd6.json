{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\smart-medicine-refill-system\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport authService from '../services/authService.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const location = useLocation();\n  const useMock = (process.env.REACT_APP_USE_MOCK_API || '').toLowerCase() === 'true';\n  if (useMock) {\n    // In mock mode, allow access without strict auth to avoid bouncing\n    return children;\n  }\n  const isAuthed = authService.isAuthenticated();\n  if (!isAuthed) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true,\n      state: {\n        from: location.pathname\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_s(ProtectedRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","authService","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","location","useMock","process","env","REACT_APP_USE_MOCK_API","toLowerCase","isAuthed","isAuthenticated","to","replace","state","from","pathname","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/smart-medicine-refill-system/frontend/src/components/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport authService from '../services/authService.ts';\r\n\r\ninterface ProtectedRouteProps {\r\n  children: React.ReactElement;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {\r\n  const location = useLocation();\r\n  const useMock = (process.env.REACT_APP_USE_MOCK_API || '').toLowerCase() === 'true';\r\n  if (useMock) {\r\n    // In mock mode, allow access without strict auth to avoid bouncing\r\n    return children;\r\n  }\r\n\r\n  const isAuthed = authService.isAuthenticated();\r\n\r\n  if (!isAuthed) {\r\n    return <Navigate to=\"/login\" replace state={{ from: (location as any).pathname }} />;\r\n  }\r\n\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,OAAOC,WAAW,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMrD,MAAMC,cAA6C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,OAAO,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,EAAE,EAAEC,WAAW,CAAC,CAAC,KAAK,MAAM;EACnF,IAAIJ,OAAO,EAAE;IACX;IACA,OAAOH,QAAQ;EACjB;EAEA,MAAMQ,QAAQ,GAAGZ,WAAW,CAACa,eAAe,CAAC,CAAC;EAE9C,IAAI,CAACD,QAAQ,EAAE;IACb,oBAAOV,OAAA,CAACJ,QAAQ;MAACgB,EAAE,EAAC,QAAQ;MAACC,OAAO;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAGX,QAAQ,CAASY;MAAS;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtF;EAEA,OAAOlB,QAAQ;AACjB,CAAC;AAACC,EAAA,CAfIF,cAA6C;EAAA,QAChCJ,WAAW;AAAA;AAAAwB,EAAA,GADxBpB,cAA6C;AAiBnD,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}